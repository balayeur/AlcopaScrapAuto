import requests
import sqlite3
import time
from bs4 import BeautifulSoup

# URL —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
URL = "https://www.alcopa-auction.fr/"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_FILE = "sales.db"

def init_db():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É –≤ SQLite, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS sales (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        category TEXT,
                        title TEXT,
                        date TEXT,
                        price TEXT,
                        UNIQUE(category, title, date)
                    )''')
    conn.commit()
    conn.close()

def fetch_page():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(URL, headers=headers)
    if response.status_code == 200:
        return response.text
    else:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", response.status_code)
        return None

def parse_sales(html):
    """–ü–∞—Ä—Å–∏—Ç HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö."""
    soup = BeautifulSoup(html, "lxml")
    sales_data = []

    categories = {
        "Vente en Salle": "vente-en-salle-class",
        "Vente Web": "vente-web-class",
        "Vente de mat√©riel en salle": "vente-materiel-class"
    }

    for category, class_name in categories.items():
        sales = soup.find_all("div", class_=class_name)  # –ù–∞–π—Ç–∏ –±–ª–æ–∫–∏ –ø—Ä–æ–¥–∞–∂

        for sale in sales:
            title = sale.find("h2").text.strip() if sale.find("h2") else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            date = sale.find("span", class_="date").text.strip() if sale.find("span", class_="date") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            price = sale.find("span", class_="price").text.strip() if sale.find("span", class_="price") else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

            sales_data.append((category, title, date, price))

    return sales_data

def save_to_db(sales_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    new_entries = 0

    for sale in sales_data:
        try:
            cursor.execute("INSERT INTO sales (category, title, date, price) VALUES (?, ?, ?, ?)", sale)
            new_entries += 1
        except sqlite3.IntegrityError:
            pass  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏

    conn.commit()
    conn.close()
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {new_entries}")

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã."""
    init_db()
    while True:
        print("üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        html = fetch_page()
        if html:
            sales_data = parse_sales(html)
            save_to_db(sales_data)
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—É—Å–∫–æ–º...")
        time.sleep(1800 * 100)  # 30 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    main()